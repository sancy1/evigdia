# Generated by Django 5.2 on 2025-05-01 23:20

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(blank=True, max_length=150, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("icon", models.CharField(blank=True, max_length=50, null=True)),
                ("meta_title", models.CharField(blank=True, max_length=70)),
                ("meta_description", models.CharField(blank=True, max_length=160)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SocialPlatform",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                (
                    "base_share_url",
                    models.URLField(
                        help_text="Base URL for sharing (e.g., https://twitter.com/intent/tweet?url=)"
                    ),
                ),
                (
                    "icon_class",
                    models.CharField(
                        blank=True,
                        help_text="CSS class for platform icon",
                        max_length=50,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "order",
                    models.PositiveSmallIntegerField(
                        default=0, help_text="Display order in sharing widgets"
                    ),
                ),
            ],
            options={
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("slug", models.SlugField(blank=True, max_length=150, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="AdminNotification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("post_view", "Post View"),
                            ("comment", "Comment"),
                            ("reaction", "Reaction"),
                            ("favorite", "Favorite"),
                            ("search", "Search"),
                            ("subscription", "Subscription"),
                        ],
                        help_text="Type of notification",
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("message", models.TextField()),
                ("related_object_id", models.UUIDField(blank=True, null=True)),
                ("related_content_type", models.CharField(blank=True, max_length=100)),
                ("is_read", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "verbose_name": "Admin Notification",
                "verbose_name_plural": "Admin Notifications",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["notification_type"],
                        name="blog_adminn_notific_f39e47_idx",
                    ),
                    models.Index(
                        fields=["is_read"], name="blog_adminn_is_read_529172_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="blog_adminn_created_2d5e21_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="BlogPost",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        max_length=255,
                        validators=[django.core.validators.MinLengthValidator(10)],
                    ),
                ),
                ("slug", models.SlugField(blank=True, max_length=300, unique=True)),
                (
                    "excerpt",
                    models.TextField(
                        blank=True,
                        help_text="Brief summary of the post",
                        max_length=500,
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="Main content of the blog post",
                        validators=[django.core.validators.MinLengthValidator(500)],
                    ),
                ),
                (
                    "rendered_content",
                    models.TextField(
                        blank=True, help_text="HTML rendered content for faster display"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("published", "Published"),
                            ("archived", "Archived"),
                            ("scheduled", "Scheduled"),
                        ],
                        default="draft",
                        max_length=10,
                    ),
                ),
                ("is_featured", models.BooleanField(default=False)),
                ("is_pinned", models.BooleanField(default=False)),
                ("allow_comments", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                (
                    "scheduled_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Set future date/time for scheduled publishing",
                        null=True,
                    ),
                ),
                (
                    "featured_image",
                    models.ImageField(
                        blank=True,
                        help_text="Featured image for the blog post",
                        null=True,
                        upload_to="blog/featured_images/%Y/%m/%d/",
                    ),
                ),
                (
                    "featured_image_alt",
                    models.CharField(
                        blank=True,
                        help_text="Alt text for the featured image",
                        max_length=255,
                    ),
                ),
                (
                    "embedded_media",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of embedded media (YouTube, Twitter, etc.)",
                    ),
                ),
                (
                    "meta_title",
                    models.CharField(
                        blank=True,
                        help_text="Title for SEO (max 70 chars)",
                        max_length=70,
                    ),
                ),
                (
                    "meta_description",
                    models.CharField(
                        blank=True,
                        help_text="Description for SEO (max 160 chars)",
                        max_length=160,
                    ),
                ),
                (
                    "meta_keywords",
                    models.CharField(
                        blank=True,
                        help_text="Comma-separated keywords for SEO",
                        max_length=255,
                    ),
                ),
                (
                    "canonical_url",
                    models.URLField(
                        blank=True,
                        help_text="Canonical URL for SEO if this content appears elsewhere",
                    ),
                ),
                (
                    "reading_time",
                    models.PositiveSmallIntegerField(
                        default=0, help_text="Estimated reading time in minutes"
                    ),
                ),
                ("word_count", models.PositiveIntegerField(default=0)),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("comment_count", models.PositiveIntegerField(default=0)),
                ("like_count", models.PositiveIntegerField(default=0)),
                (
                    "code_snippets_data",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of code snippets with language and content",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        limit_choices_to={"is_staff": True},
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="blog_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "related_posts",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Manually selected related posts",
                        to="blog.blogpost",
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True, related_name="blog_posts", to="blog.category"
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True, related_name="blog_posts", to="blog.tag"
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Post",
                "verbose_name_plural": "Blog Posts",
                "ordering": ["-published_at", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ClickEvent",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("element_type", models.CharField(max_length=50)),
                ("element_id", models.CharField(blank=True, max_length=100)),
                ("element_text", models.CharField(blank=True, max_length=255)),
                ("url", models.URLField(blank=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="click_events",
                        to="blog.blogpost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blog_clicks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CodeSnippet",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("language", models.CharField(max_length=50)),
                ("code", models.TextField()),
                ("caption", models.CharField(blank=True, max_length=255)),
                ("line_numbers", models.BooleanField(default=True)),
                ("highlighted_lines", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="code_snippets",
                        to="blog.blogpost",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("author_name", models.CharField(blank=True, max_length=100)),
                ("guest_name", models.CharField(blank=True, max_length=100)),
                ("guest_email", models.EmailField(blank=True, max_length=254)),
                (
                    "content",
                    models.TextField(
                        max_length=1000,
                        validators=[django.core.validators.MinLengthValidator(10)],
                    ),
                ),
                ("is_approved", models.BooleanField(default=False)),
                ("is_spam", models.BooleanField(default=False)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.CharField(blank=True, max_length=255)),
                ("referrer", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="blog.comment",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="blog.blogpost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blog_comments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment",
                "verbose_name_plural": "Comments",
                "ordering": ["created_at"],
                "permissions": [("can_moderate", "Can moderate comments")],
            },
        ),
        migrations.CreateModel(
            name="CommentReaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "reaction",
                    models.CharField(
                        choices=[
                            ("like", "Like"),
                            ("dislike", "Dislike"),
                            ("laugh", "Laugh"),
                            ("heart", "Heart"),
                        ],
                        max_length=10,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactions",
                        to="blog.comment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comment_reactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Comment Reaction",
                "verbose_name_plural": "Comment Reactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ContentSyndication",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("platform_name", models.CharField(max_length=100)),
                ("url", models.URLField()),
                ("published_at", models.DateTimeField(blank=True, null=True)),
                (
                    "is_canonical",
                    models.BooleanField(
                        default=False,
                        help_text="Is this the canonical version of the content?",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional metadata about the syndication",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="syndications",
                        to="blog.blogpost",
                    ),
                ),
            ],
            options={
                "verbose_name": "Content Syndication",
                "verbose_name_plural": "Content Syndications",
                "ordering": ["-published_at"],
            },
        ),
        migrations.CreateModel(
            name="Favorite",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Optional notes about why this was favorited",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorited_by",
                        to="blog.blogpost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_favorites",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Favorite",
                "verbose_name_plural": "Favorites",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Like",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="likes",
                        to="blog.blogpost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_likes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MediaAttachment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "upload",
                    models.FileField(
                        blank=True, null=True, upload_to="blog/media/%Y/%m/"
                    ),
                ),
                ("url", models.URLField(blank=True)),
                (
                    "media_type",
                    models.CharField(
                        choices=[
                            ("image", "Image"),
                            ("video", "Video"),
                            ("document", "Document"),
                            ("audio", "Audio"),
                            ("embed", "Embed"),
                        ],
                        default="image",
                        max_length=10,
                    ),
                ),
                ("caption", models.CharField(blank=True, max_length=255)),
                ("alt_text", models.CharField(blank=True, max_length=125)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="media_attachments",
                        to="blog.blogpost",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("comment", "New Comment"),
                            ("reply", "Reply to Comment"),
                            ("post_update", "Post Update"),
                            ("new_post", "New Post"),
                            ("like", "Post Liked"),
                            ("favorite", "Post Favorited"),
                            ("view", "Post Viewed"),
                        ],
                        max_length=20,
                    ),
                ),
                ("message", models.CharField(max_length=255)),
                ("is_read", models.BooleanField(default=False)),
                ("target_url", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "related_post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="blog.blogpost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PostReaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "reaction",
                    models.CharField(
                        choices=[
                            ("like", "Like"),
                            ("love", "Love"),
                            ("laugh", "Laugh"),
                            ("wow", "Wow"),
                            ("sad", "Sad"),
                            ("angry", "Angry"),
                            ("thumbs_up", "Thumbs Up"),
                            ("thumbs_down", "Thumbs Down"),
                            ("checkmark", "Checkmark"),
                            ("star", "Star"),
                        ],
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reactions",
                        to="blog.blogpost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="post_reactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Post Reaction",
                "verbose_name_plural": "Post Reactions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PostView",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.CharField(blank=True, max_length=255)),
                ("referrer", models.URLField(blank=True)),
                ("viewed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "time_spent",
                    models.PositiveIntegerField(
                        default=0, help_text="Time spent reading in seconds"
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="blog.blogpost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blog_views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Post View",
                "verbose_name_plural": "Post Views",
                "ordering": ["-viewed_at"],
            },
        ),
        migrations.CreateModel(
            name="ReadHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("last_read_at", models.DateTimeField(auto_now=True)),
                ("read_count", models.PositiveIntegerField(default=1)),
                ("is_completed", models.BooleanField(default=False)),
                (
                    "scroll_position",
                    models.PositiveIntegerField(
                        default=0, help_text="Last scroll position in pixels"
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="read_by",
                        to="blog.blogpost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blog_read_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Read History",
                "verbose_name_plural": "Read Histories",
                "ordering": ["-last_read_at"],
            },
        ),
        migrations.CreateModel(
            name="SearchQuery",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("query", models.CharField(max_length=255)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("results_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="search_queries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Search Query",
                "verbose_name_plural": "Search Queries",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ShareableLink",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("token", models.CharField(max_length=50, unique=True)),
                (
                    "expiration",
                    models.DateTimeField(
                        blank=True,
                        help_text="Optional expiration date for the link",
                        null=True,
                    ),
                ),
                (
                    "max_uses",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Max number of times this link can be used",
                        null=True,
                    ),
                ),
                ("use_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Internal notes about this share link"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_share_links",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shareable_links",
                        to="blog.blogpost",
                    ),
                ),
            ],
            options={
                "verbose_name": "Shareable Link",
                "verbose_name_plural": "Shareable Links",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ShareTracking",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "share_method",
                    models.CharField(
                        choices=[
                            ("social", "Social Media"),
                            ("email", "Email"),
                            ("link", "Direct Link"),
                            ("embed", "Embedded Share"),
                        ],
                        default="social",
                        max_length=20,
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.CharField(blank=True, max_length=255)),
                ("referrer", models.URLField(blank=True)),
                ("shared_at", models.DateTimeField(auto_now_add=True)),
                (
                    "clickback_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times people clicked through this share",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional tracking data"
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shares",
                        to="blog.blogpost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="content_shares",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "platform",
                    models.ForeignKey(
                        blank=True,
                        help_text="Null means direct link sharing",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="blog.socialplatform",
                    ),
                ),
            ],
            options={
                "verbose_name": "Share Tracking",
                "verbose_name_plural": "Share Tracking",
                "ordering": ["-shared_at"],
            },
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("is_active", models.BooleanField(default=True)),
                ("token", models.CharField(max_length=100, unique=True)),
                ("confirmation_token", models.CharField(blank=True, max_length=100)),
                ("is_confirmed", models.BooleanField(default=False)),
                ("subscribed_at", models.DateTimeField(auto_now_add=True)),
                ("unsubscribed_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "preferences",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Subscription preferences for categories or post types",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="newsletter_subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Subscription",
                "verbose_name_plural": "Subscriptions",
                "ordering": ["-subscribed_at"],
            },
        ),
        migrations.CreateModel(
            name="AdminActivityLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "activity_type",
                    models.CharField(
                        choices=[
                            ("post_view", "Post Viewed"),
                            ("comment", "Comment Added"),
                            ("like", "Post Liked"),
                            ("dislike", "Post Disliked"),
                            ("favorite", "Post Favorited"),
                            ("share", "Post Shared"),
                            ("read", "Post Read"),
                            ("search", "Content Searched"),
                        ],
                        max_length=20,
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("metadata", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_processed", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="blog.blogpost",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["activity_type"], name="blog_admina_activit_5d653a_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="blog_admina_created_60eb66_idx"
                    ),
                    models.Index(
                        fields=["is_processed"], name="blog_admina_is_proc_043cc0_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="BlogPostRevision",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("revision_number", models.PositiveIntegerField()),
                ("title", models.CharField(max_length=255)),
                ("content", models.TextField()),
                ("excerpt", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("revision_notes", models.TextField(blank=True)),
                (
                    "changes",
                    models.TextField(
                        blank=True, help_text="Summary of changes in this revision"
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="revisions",
                        to="blog.blogpost",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Post Revision",
                "verbose_name_plural": "Post Revisions",
                "ordering": ["-revision_number"],
                "unique_together": {("post", "revision_number")},
            },
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(fields=["post"], name="blog_commen_post_id_fe6079_idx"),
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(fields=["user"], name="blog_commen_user_id_dd6a39_idx"),
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(
                fields=["is_approved"], name="blog_commen_is_appr_be38d5_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(
                fields=["created_at"], name="blog_commen_created_4e025c_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="commentreaction",
            unique_together={("user", "comment")},
        ),
        migrations.AlterUniqueTogether(
            name="contentsyndication",
            unique_together={("post", "platform_name")},
        ),
        migrations.AlterUniqueTogether(
            name="favorite",
            unique_together={("user", "post")},
        ),
        migrations.AlterUniqueTogether(
            name="like",
            unique_together={("user", "post")},
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["notification_type"], name="blog_notifi_notific_0a2598_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["is_read"], name="blog_notifi_is_read_ea054d_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="postreaction",
            unique_together={("user", "post")},
        ),
        migrations.AddIndex(
            model_name="postview",
            index=models.Index(
                fields=["post", "user"], name="blog_postvi_post_id_b9040f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="postview",
            index=models.Index(
                fields=["viewed_at"], name="blog_postvi_viewed__23679d_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="readhistory",
            unique_together={("user", "post")},
        ),
        migrations.AddIndex(
            model_name="sharetracking",
            index=models.Index(
                fields=["post", "platform"], name="blog_sharet_post_id_69ecb4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sharetracking",
            index=models.Index(
                fields=["shared_at"], name="blog_sharet_shared__cbe12a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(
                fields=["status", "published_at"], name="blog_blogpo_status_aa5436_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(fields=["slug"], name="blog_blogpo_slug_361555_idx"),
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(
                fields=["author"], name="blog_blogpo_author__0d5a17_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blogpost",
            index=models.Index(
                fields=["is_featured"], name="blog_blogpo_is_feat_aa3e07_idx"
            ),
        ),
    ]
